name: Cleanup of Stale Branches (Dry Run Only with Summary)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run without deleting branches (true/false)'
        required: true
        default: 'true'
  push:
    branches:
      - feature-9556-automate-pruning-of-stale-branches
  pull_request:
    branches:
      - feature-9556-automate-pruning-of-stale-branches

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Ensure CLI tools are installed
        run: |
          command -v gh >/dev/null || (echo "❌ GitHub CLI (gh) is not installed" && exit 1)
          command -v jq >/dev/null || (echo "❌ jq is not installed" && exit 1)

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          gh auth setup-git
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch protected branches
        id: protected
        run: |
          echo "Fetching protected branches..."
          gh api repos/${{ github.repository }}/branches \
            --jq '.[] | select(.protected == true) | .name' > protected-branches.txt

      - name: Simulate stale branch cleanup (no deletion)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          set -e
          git fetch --all --prune --tags

          mapfile -t protected < protected-branches.txt
          protected_branches="${protected[*]}"

          echo "| Branch | Status | Reason |"
          echo "|--------|--------|--------|"

          branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | sed 's|origin/||')

          for branch in $branches; do
            reason=""
            status="⏸️ Skipped"

            if [ "$branch" == "main" ]; then
              reason="Main branch"
            elif echo "$protected_branches" | grep -qw "$branch"; then
              reason="Protected by GitHub rules"
            elif git show-ref --verify --quiet "refs/tags/do-not-prune/$branch"; then
              reason="Tagged do-not-prune"
            elif [[ $(git log -1 --since="3 months ago" origin/"$branch") == "" ]]; then
              reason="Stale (no commits in 90d)"
              status="🚫 Would delete"
            else
              reason="Active (recent commits)"
            fi

            printf "| \`%s\` | %s | %s |\n" "$branch" "$status" "$reason"
          done
