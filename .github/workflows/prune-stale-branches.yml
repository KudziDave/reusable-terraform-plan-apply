name: Cleanup of Stale Branches (Dry Run Only with Summary)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run without deleting branches (true/false)'
        required: true
        default: 'true'
  push:
    branches:
      - feature-final-branch
  pull_request:
    branches:
      - feature-final-branch

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Ensure CLI tools are installed
        run: |
          command -v gh >/dev/null || (echo "‚ùå GitHub CLI (gh) is not installed" && exit 1)
          command -v jq >/dev/null || (echo "‚ùå jq is not installed" && exit 1)

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          gh auth setup-git
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch branches protected from deletion
        id: protected
        run: |
          echo "Fetching branches with 'deletion protection' enabled..."
          > protected-branches.txt

          branches=$(gh api repos/${{ github.repository }}/branches --jq '.[].name')

          for branch in $branches; do
            protection=$(gh api repos/${{ github.repository }}/branches/$branch/protection --silent 2>/dev/null || true)
            allow_delete=$(echo "$protection" | jq -r '.allow_deletions.enabled // "true"')

            if [[ "$allow_delete" == "false" ]]; then
              echo "$branch" >> protected-branches.txt
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Simulate stale branch cleanup (no deletion)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          set -e
          git fetch --all --prune --tags

          mapfile -t protected < protected-branches.txt
          protected_branches="${protected[*]}"

          echo "Branches protected from deletion: ${protected_branches[@]}"
          echo ""

          echo "| Branch | Status | Reason |"
          echo "|--------|--------|--------|"

          branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/)

          for raw_branch in $branches; do
            branch=$(echo "$raw_branch" | sed 's|^origin/||' | xargs)

            if [[ -z "$branch" || "$branch" == "origin" ]]; then
              continue
            fi

            reason=""
            status="‚è∏Ô∏è Skipped"

            echo ""
            echo "üîç Checking branch: $branch"

            last_commit_date=$(git log -1 --format=%aD origin/$branch || echo "Unknown")
            last_commit_timestamp=$(date -d "$last_commit_date" +%s 2>/dev/null || echo 0)

            merge_base=$(git merge-base origin/main origin/$branch || true)
            first_unique_commit=$(git log origin/$branch --reverse --pretty=format:"%H" --not $merge_base | head -1)

            if [ -n "$first_unique_commit" ]; then
              branch_creation_date=$(git show -s --format=%aD $first_unique_commit)
              branch_creation_timestamp=$(date -d "$branch_creation_date" +%s)
            else
              echo "  ‚û§ No unique commits found. Skipping stale check for safety."
              reason="No unique commits"
              printf "| \`%s\` | ‚è∏Ô∏è Skipped | %s |\n" "$branch" "$reason"
              continue
            fi

            three_months_ago_timestamp=$(date -d "3 months ago" +%s)

            echo "  ‚û§ Creation date: $branch_creation_date"
            echo "  ‚û§ Last commit date: $last_commit_date"

            if echo "${protected_branches[@]}" | grep -qw "$branch"; then
              reason="Deletion protection enabled"
            elif git show-ref --verify --quiet "refs/tags/do-not-prune/$branch"; then
              reason="Tagged do-not-prune"
            elif [[ $last_commit_timestamp -lt $three_months_ago_timestamp ]] && [[ $branch_creation_timestamp -lt $three_months_ago_timestamp ]]; then
              if [[ "$branch" == "main" ]]; then
                echo "üö® ERROR: Script determined 'main' is stale and would be deleted. Failing to prevent disaster."
                exit 1
              fi
              reason="Stale (no commits in 90d, older than 3 months)"
              status="üö´ Would delete"
            else
              reason="Active (recent commits)"
            fi

            printf "| \`%s\` | %s | %s |\n" "$branch" "$status" "$reason"
          done
