- name: Simulate stale branch cleanup (no deletion)
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DRY_RUN: ${{ github.event.inputs.dry_run }}
run: |
  set -e
  git fetch --all --prune --tags

  mapfile -t protected < protected-branches.txt
  protected_branches="${protected[*]}"

  echo "| Branch | Status | Reason |"
  echo "|--------|--------|--------|"

  branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | sed 's|^origin/||')

  for branch in $branches; do
    if [[ "$branch" == "origin" ]]; then
      continue  # Skip incorrect or malformed branch names
    fi

    reason=""
    status="⏸️ Skipped"

    branch_path="refs/remotes/origin/${branch}"
    branch_creation_date=$(git log --reverse --format=%aD $branch_path | head -1)
    last_commit_date=$(git log -1 --format=%aD $branch_path)

    # Convert dates to timestamps
    branch_creation_timestamp=$(date -d "$branch_creation_date" +%s)
    last_commit_timestamp=$(date -d "$last_commit_date" +%s)
    three_months_ago_timestamp=$(date -d "3 months ago" +%s)

    echo "Debug: Branch $branch - Creation Date: $branch_creation_date, Last Commit Date: $last_commit_date"

    if [ "$branch" == "main" ]; then
      reason="Main branch"
    elif echo "$protected_branches" | grep -qw "$branch"; then
      reason="Protected by GitHub rules"
    elif git show-ref --verify --quiet "refs/tags/do-not-prune/$branch"; then
      reason="Tagged do-not-prune"
    elif [[ $last_commit_timestamp -lt $three_months_ago_timestamp ]] && [[ $branch_creation_timestamp -lt $three_months_ago_timestamp ]]; then
      reason="Stale (no commits in 90d, older than 3 months)"
      status="🚫 Would delete"
    else
      reason="Active (recent commits)"
    fi

    printf "| \`%s\` | %s | %s |\n" "$branch" "$status" "$reason"
  done


